/*
http://www.codexpert.org:83/problem.php?cid=1124&pid=24

문제 설명
소들은 농부 존의 농장을 탈출하는 대담한 계획을 세웠다. 그들은 작은 고무 보트를 구했고 한 밤중에 농장 경계에 흐르는 강을 보트를 타고 건너려는 계획이다. 그 계획은 완벽해 보였다. 작은 고무 보트가 소들의 무게를 견디지 못한다는 사실을 알기 전까지는…
 
N마리의 소(1≤N≤20)들의 무게는 각각 W_1, …, W_N이다. 보트가 침몰하지 않을 만큼 가벼운 소들을 선별해야 한다. 불행하게도, 소들은 산수를 못하기로 유명하다. 10진법을 사용하는 소들은 소들의 무게를 더하다가 자리올림이 발생하는 경우 그 소는 보트를 사용하기에는 너무 무거운 소라고 판단한다. 자리올림이 발생하지 않고 더할 수 있는 무게가 보트를 사용할 수 있는 가벼운 무게이다.
 
당신이 할 일은 소들을 도와서 보트를 탈 수 있는 소들의 최대 수를 구하는 것이다. 즉, 소들의 무게들을 모두 더했을 때 자리올림이 발생하지 않게 하는 소들의 최대 수를 구하는 것이다.

입력 설명
첫 줄에 소들의 수 N(1≤N≤20)이 주어진다.
두 번째 줄부터 N 줄에 걸쳐 각 소의 무게(W_i)가 입력된다. (정수, 1≤W_i≤100,000,000)

출력 설명
무게를 모두 더했을 때 어떤 자리에서도 자리올림이 발생하지 않는 소들의 최대 수를 출력하라.

입력 예시
5
522
6
84
7311
19

출력 예시
3
*/


#include<stdio.h>

	int N;
	long long arr[25];
	long long MAX;

	int check(long long weight, long long sum) {	//자리올림 발생의 유무를 확인할 함
		int a, b;
		while(weight&&sum) {			//둘 다 숫자가 있을 때
			a = weight % 10;		//10으로 나눈 나머지 즉 1의자리 숫자를 계산하여 비교
			b = sum % 10;
			if (a + b >= 10) return 0;
			weight /= 10;			//다음 자리 숫자를 비교하기 위하여 10으로 나눈 몫으로 갱
			sum /= 10;
		}
		return 1;				//loop를 통과 했다면 자리올림이 발생하지 않음
	}

	void dfs(int turn, long long cnt, long long sum) {

		if (turn == N) {			//현재까지 가능한 소의 묶음 수 = cnt
			if (MAX < cnt)  MAX = cnt;	//MAX갱신
			return;
		}
							//현재의 소를 넣어도 문제가 없다면 넣고 다음단계
		if (check(arr[turn], sum))dfs(turn + 1, cnt + 1, sum + arr[turn]);
		dfs(turn + 1, cnt, sum);		//문제가 있다면 넣지않고 다음단
	}

	int main() {
		scanf("%d",&N);
		for (int i = 0; i < N; i++)
			scanf("%lld",&arr[i]);
		dfs(0,0,0);
		printf("%lld\n",MAX);
	}
