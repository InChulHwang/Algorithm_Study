#include<stdio.h>

int M, N, Q;
int people[300010];			            	//들어온 순서대로 앉는 위치를 저장할 배열
int freind[300010];			            	//친구들이 들어오는 순서를 저장할 배열
int heap[300010][2];		            	//빈 공간의 시작점, 크기를 max heap으로 저장
int last=0;					                 	//heap의 제일 끝부분을 가리킴
int start, size, end;
int use_start, use_size;

void Heap_push(int st,int si){
	
	int n, p, temp1,temp2;
	heap[++last][0]= si;
	heap[last][1] = st;
	n = last;
	p = n / 2;

	while (1) {
		if (p == 0) return;
		if ((heap[n][0]> heap[p][0]) || (heap[n][0]==heap[p][0] && heap[n][1]<heap[p][1])) {
			temp1 = heap[n][0];
			temp2 = heap[n][1];
			heap[n][0] = heap[p][0];
			heap[n][1] = heap[p][1];
			heap[p][0] = temp1;
			heap[p][1] = temp2;
			n = p;
			p = n / 2;
		}
		else return;
	}
}

void Heap_pop() {

	use_start = heap[1][1];
	use_size = heap[1][0];

	heap[1][0] = heap[last][0];
	heap[1][1] = heap[last--][1];

	int p, n1, n2, temp1, temp2;
	p = 1; n1 = 2; n2 = 3; int c;

	while (n1 <= last) {
		if (last == n1) c = n1;
		else c = (heap[n1][0] > heap[n2][0] || (heap[n1][0]==heap[n2][0] && heap[n1][1]<heap[n2][1])) ? n1 : n2;

		if ((heap[c][0]> heap[p][0]) || (heap[c][0]==heap[p][0] && heap[c][1]< heap[p][1] )) {
			temp1 = heap[c][0];
			temp2 = heap[c][1];
			heap[c][0] = heap[p][0];
			heap[c][1] = heap[p][1];
			heap[p][0] = temp1;
			heap[p][1] = temp2;
			p = c; n1 = p * 2; n2 = n1 + 1;
		}
		else break;
	}
	return;
}

int main() {

	scanf("%d %d %d",&M,&N,&Q);

	int l;
	for (int i = 1; i < N+1; i++) {
		scanf("%d", &l);
		people[i] = l;

		//처음 위치. 시작부분에 컴퓨터가 없을 수 있다.
		if (start == 0) {
			if (l > 1) Heap_push(1, l - 1);
			start = l;
		}
		//두번째 이상이기에 지금 위치가 end로써 push
		//그 후 지금 위치를 start로 바꾼다.
		else {
			Heap_push(start + 1, l - start - 1);
			start = l;
		}
	}
	Heap_push(start + 1, M - start);

	for (int i = 1; i < Q + 1; i++) {
		scanf("%d",&l);
		freind[i]=l;
	}

	int mid;

	for (int i = 1; i < M+1; i++) {
		if (i <= N) continue;
		else {
			Heap_pop();
			start = use_start;
			size = use_size;
			mid = start + (size - 1) / 2;
			if (mid - start ) Heap_push(start, mid - start );
			if (size / 2) Heap_push(mid + 1, size / 2);
			people[i] = mid;
		}
	}
	
	for (int i = 1; i < Q + 1; i++)
		printf("%d\n",people[freind[i]]);
	   
}
