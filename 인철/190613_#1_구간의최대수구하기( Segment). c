/*
http://www.codexpert.org:83/problem.php?cid=1124&pid=26

문제 설명
정수로 이뤄진 수열을 입력 받은 다음, 수열의 임의의 연속된 구간의 최대값을 구하는 프로그램을 작성한다.
 
수열의 원소는 번호가 매겨지는데, 맨 앞의 원소부터 1, 2, ... 순으로 숫자가 매겨진다.

입력 설명
입력의 첫번째 줄에는 수열을 이루는 원소의 갯수 N(1≤N≤50,000)과 구간의 갯수 Q(1≤Q≤200,000)가 공백을 사이에 두고 입력된다.
그 다음 N개의 줄에는 순서대로 서있는 원소의 숫자가 한줄에 하나씩 입력되는데, 이는 1이상 1,000,000이하이다.
그 다음  Q개의 구간의 시작과 끝 A, B가 공백을 사이에 두고 입력되며, A는 구간이 시작되는 원소의 번호, B는 구간이 끝나는 원소의 번호이며 A와 B는 1이상 N이하의 수이며 A는 B보다 작거나 같다.

출력 설명
입력된 Q개의 구간에 대한 가장 큰 원소를 출력하는 프로그램을 작성한다.

입력 예시
4 3
1
3
2
4
1 2
2 4
1 1

출력 예시
3
4
1
*/

#include<stdio.h>
#define MAX(A,B) (((A)>(B))?(A):(B))

	int N, Q;
	int map[50010];
	int use[50000 * 3];
	int lazy[50000 * 3];
	int a, b;
	   
	//주어진 입력값에 대한 값을 출력하기 위한 함수
	int Query(int n, int s, int e, int qs, int qe)
	{
		int m, l, r;				
		if (qs <= s && e <= qe) return use[n];		//범위 안에 온전히 포함된다면 그 값을 반환
		if (e < qs || qe < s) return 0;			//범위 안에 완전히 없다면 0을 반환
		
		//위에서 반환 되지 않았으므로 오른쪽, 왼쪽의 값으로 나눠 계산을 해야 한다.
		m = (s + e) / 2;				//체크값을 반으로 나누고

		l = Query(n * 2, s, m, qs, qe);			//왼쪽 값에 대해 계산
		r = Query(n * 2 + 1, m + 1, e, qs, qe);		//오른쪽 값에 대해 계산

		return MAX(l, r);				//왼쪽과 오른쪽 값중 큰것을 반환
	}
	
	//Segment Tree 를 처음 생성하는 함
	void init(int n, int s, int e)	{
		int i, d;
		int m = (s + e) / 2;
		int t;
		if (s == e){					//구간의 시작과 끝이 같아지는 지점 즉  leap node 도착
			use[n] = map[s];			//값을 저장
			return;
		}
		init(n * 2, s, m);				//재귀적으로 왼쪽자식, 오른쪽 자식에 대해 입력
		init(n * 2 + 1, m + 1, e);

		use[n] = MAX(use[n * 2], use[n * 2 + 1]);	//왼쪽,오른쪽 자식중 큰 값을 구간의 대표값으로 설
	}


	int main() {

		scanf("%d %d",&N,&Q);
		for (int i = 1; i < N + 1; i++) {
			scanf("%d", map+i);
		}
		init(1, 1, N);

		for (int i = 1; i < Q + 1; i++) {
			scanf("%d %d", &a,&b);
			printf("%d\n", Query(1, 1, N, a,b));
		}
	}
