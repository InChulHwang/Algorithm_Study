/*
http://www.codexpert.org:83/problem.php?cid=1124&pid=28

문제 설명
광규네 집에는 총 N개의 스위치가 있고 1번부터 N번까지 번호가 붙어있다. 광규는 취미가 이 스위치들을 켜고 끄는 것이다. 광규는 2가지 방법으로 스위치를 갖고 논다.
1.    A번부터 B번 사이의 스위치 상태를 반전시킨다.
2.    C번부터 D번 사이의 스위치 중 켜져 있는 스위치의 개수를 세는 것이다.
광규가 위와 같은 조작을 하였을 때의 결과를 알아보자

입력 설명
첫 번째 줄에는 스위치의 개수 N과 처리할 일의 개수 M이 공백으로 구분되어 입력된다 (2≤N≤100,000) (1≤M≤100,000)
두 번째 줄부터 M줄에 걸쳐 처리할 일의 정보가 3개의 정수 형태로 입력된다. 3개의 정수 O, S, T는 공백으로 구분되어 있다. O의 값이 0이면 S부터 T까지 스위치 상태를 반전시킨다. 1이면 S부터 T까지 스위치 중 켜져 있는 스위치의 개수를 묻는 것이다.
초기에는 모든 스위치가 꺼져 있다.

출력 설명
입력 중 켜져 있는 스위치의 개수를 묻는 명령에 대한 답을 한 줄에 하나씩 출력한다.

입력 예시
4 5
0 1 2
0 2 4
1 2 3
0 2 4
1 1 4

출력 예시
1
2
*/


#include<stdio.h>

	int N, M,O,S,T;
	int map[100010];
	int use[100000 * 3];
	int lazy[100000 * 3];
	int Rs, Re, I, C;
	
	//lazy 사용을 위한 propagation
	void propagate(int node, int s, int e) {
		if (lazy[node]) {			//반전이 필요하면
			if (s != e) {			//leap가 아니면 자식노드에 반전정보 저장
				lazy[node * 2] ^=1;
				lazy[node * 2 + 1] ^=1;
			}
			use[node] = (e - s + 1)-use[node];//반전 실행
			lazy[node] = 0;		
		}
	}
	
	//반전행위를 수행할 함수
	void Update(int node, int s, int e, int qs,int qe) {

		propagate(node, s, e);

		if (qs <= s && e <= qe) {		//범위 안에 포함이 된다면
			lazy[node] ^= 1;		//번전여부를 갱신(1이면 반전이 필요한 상황, 0이면 반전이 필요없는 상황)
			propagate(node, s, e);
			return;
		}
		if (qs > e || s > qe) return;		//범위 밖이면 종료

		int m = (s + e) / 2;
		Update(node * 2, s, m, qs, qe);		//왼쪽 자식노드
		Update(node * 2 + 1, m + 1, e, qs, qe);	//오른쪽 자식노드
		use[node] = use[node * 2] + use[node * 2 + 1];	//값 갱신		
	}
	
	//값을 구할 함
	int Query(int node, int s, int e, int qs,int qe) {
		propagate(node, s, e);
		if (qs <= s && e <= qe) return use[node];
		if (qs > e || s > qe) return 0;
		int m = (s + e) / 2;
		return Query(node * 2, s, m, qs, qe)+ Query(node * 2 + 1, m + 1, e, qs, qe);
	}
		
	int main() {
		scanf("%d %d",&N,&M);
		for (int i = 1; i < M + 1; i++) {
			scanf("%d %d %d", &O, &S, &T);
			//S~T 반전
			if (O == 0) {
				Update(1, 1, N, S, T);
			}
			//S~T중 켜져있는 수 출력
			else {
				printf("%d\n",Query(1,1,N,S,T));
			}
		}   

	}
